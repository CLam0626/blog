{"version":3,"sources":["images/about-us-vector.png","images/macbook-pro.jpg","images/contact-us.jpg","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","styles","backgroundColor","transition","opacity","App","react_default","a","createElement","className","App_Category","style","width","height","title","background","AboutImage","position","BlogImage","ContactImage","Component","Category","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","marginTop","visibility","handleMouseOver","bind","assertThisInitialized","handleMouseLeave","setState","objectSpread","props","concat","backgroundSize","overflow","onMouseOver","onMouseLeave","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,yDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iHCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uPCOlCC,EAAQ,CACZC,gBAAiB,UACjBC,WAAY,mBACZC,QAAS,KAGLC,mLAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACE,EAAD,CAAUC,MAAO,CAACC,MAAO,MAAOC,OAAQ,QACpCC,MAAM,QAAQC,WAAYC,IAAYC,SAAS,YAEnDX,EAAAC,EAAAC,cAACE,EAAD,CAAUC,MAAO,CAACC,MAAO,MAAOC,OAAQ,QACpCC,MAAM,OAAOC,WAAYG,IAAWD,SAAS,aAEjDX,EAAAC,EAAAC,cAACE,EAAD,CAAUC,MAAO,CAACC,MAAO,MAAOC,OAAQ,QACpCC,MAAM,UAAUC,WAAYI,IAAcF,SAAS,oBAX7CG,aAkBZC,cACJ,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAO,CACRhB,OAAQ,EACRiB,UAAW,IACXC,WAAY,UAEhBT,EAAKU,gBAAkBV,EAAKU,gBAAgBC,KAArBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACvBA,EAAKa,iBAAmBb,EAAKa,iBAAiBF,KAAtBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARbA,iFAYXG,KAAKW,SAAS,CACZvB,OAAQ,GACRiB,UAAW,IACXC,WAAY,uDAKdN,KAAKW,SAAS,CACZvB,OAAQ,EACRiB,UAAW,IACXC,WAAY,4CAKZ,OACEzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUE,MAAKY,OAAAc,EAAA,EAAAd,CAAA,GAAME,KAAKa,MAAM3B,MAAjB,CAAwBI,WAAU,OAAAwB,OAASd,KAAKa,MAAMvB,WAApB,MAAAwB,OAAmCd,KAAKa,MAAMrB,SAA9C,oBAA2EuB,eAAgB,QAASC,SAAU,WACxKC,YAAajB,KAAKO,gBAAiBW,aAAclB,KAAKU,kBACxD7B,EAAAC,EAAAC,cAAA,OAAKG,MAAKY,OAAAc,EAAA,EAAAd,CAAA,GAAMtB,EAAN,CAAcY,OAAQY,KAAKI,MAAMhB,OAAQiB,UAAWL,KAAKI,MAAMC,UAAWC,WAAYN,KAAKI,MAAME,cACvGzB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YAAYgB,KAAKa,MAAMxB,gBAjC9BM,aAwCRf,IC3DKuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.72381609.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/about-us-vector.c2332b1a.png\";","module.exports = __webpack_public_path__ + \"static/media/macbook-pro.126642ec.jpg\";","module.exports = __webpack_public_path__ + \"static/media/contact-us.784ecc44.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport AboutImage from \"./images/about-us-vector.png\";\r\nimport BlogImage from \"./images/macbook-pro.jpg\";\r\nimport ContactImage from \"./images/contact-us.jpg\";\r\n\r\nconst styles= {\r\n  backgroundColor: '#86e1f7', \r\n  transition: 'all 0.2s ease-in',\r\n  opacity: .75\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='mainCat' >\r\n        <Category style={{width: '25%', height: '100%'}} \r\n            title='ABOUT' background={AboutImage} position='-73px 0'/>\r\n        \r\n        <Category style={{width: '25%', height: '100%'}} \r\n            title='BLOG' background={BlogImage} position='-300px 0'/>\r\n        \r\n        <Category style={{width: '25%', height: '100%'}} \r\n            title='CONTACT' background={ContactImage} position='-30px 0'/>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nclass Category extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state= {\r\n        height: 0,\r\n        marginTop: 500,\r\n        visibility: 'hidden'\r\n    }\r\n    this.handleMouseOver = this.handleMouseOver.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n  }\r\n\r\n  handleMouseOver() {\r\n    this.setState({\r\n      height: 50,\r\n      marginTop: 450,\r\n      visibility: 'visible' \r\n    });\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    this.setState({\r\n      height: 0,\r\n      marginTop: 500,\r\n      visibility: 'hidden' \r\n    });\r\n  }\r\n\r\n    render() {\r\n      return(\r\n        <div className='catName' style={{...this.props.style, background: `url(${this.props.background}) ${this.props.position} white no-repeat`,  backgroundSize: 'cover', overflow: 'hidden'}} \r\n              onMouseOver={this.handleMouseOver} onMouseLeave={this.handleMouseLeave}>\r\n            <div style={{...styles, height: this.state.height, marginTop: this.state.marginTop, visibility: this.state.visibility}}>\r\n                <h2 className='catTitle'>{this.props.title}</h2>\r\n            </div>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}